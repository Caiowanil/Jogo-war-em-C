// Inclus√£o das bibliotecas padr√£o necess√°rias para entrada/sa√≠da, aloca√ß√£o de mem√≥ria, manipula√ß√£o de strings e tempo.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <locale.h>

// --- Constantes Globais ---
// Definem valores fixos para o n√∫mero de territ√≥rios, miss√µes e tamanho m√°ximo de strings, facilitando a manuten√ß√£o.

#define NUM_TERRITORIOS 5
#define NUM_MISSOES 3
#define MAX_NOME 50
#define MAX_COR 20

// --- Estrutura de Dados ---
// Define a estrutura para um territ√≥rio, contendo seu nome, a cor do ex√©rcito que o domina e o n√∫mero de tropas.

typedef struct {
    char nome[MAX_NOME];
    char corExercito[MAX_COR];
    int tropas;
} Territorio;

// --- Prot√≥tipos das Fun√ß√µes ---
// Declara√ß√µes antecipadas de todas as fun√ß√µes que ser√£o usadas no programa, organizadas por categoria.
// Fun√ß√µes de setup e gerenciamento de mem√≥ria:

Territorio* alocarMapa(int qtd);
void inicializarTerritorios(Territorio* mapa, int qtd);
void liberarMemoria(Territorio* mapa);

// Fun√ß√µes de interface com o usu√°rio:

void exibirMenuPrincipal();
void exibirMapa(const Territorio* mapa, int qtd);
void exibirMissao(int idMissao);

// Fun√ß√µes de l√≥gica principal do jogo:

void faseDeAtaque(Territorio* mapa, int qtd);
void simularAtaque(Territorio* mapa, int origem, int destino);
int sortearMissao();
int verificarVitoria(const Territorio* mapa, int qtd, int idMissao);

// Fun√ß√£o utilit√°ria:

void limparBufferEntrada();


// --- Fun√ß√£o Principal (main) ---
// Fun√ß√£o principal que orquestra o fluxo do jogo, chamando as outras fun√ß√µes em ordem.
int main() {

    setlocale(LC_ALL, "Portuguese");

    srand(time(NULL));
    // 1. Configura√ß√£o Inicial (Setup):
    // - Define o locale para portugu√™s.
    // - Inicializa a semente para gera√ß√£o de n√∫meros aleat√≥rios com base no tempo atual.
    // - Aloca a mem√≥ria para o mapa do mundo e verifica se a aloca√ß√£o foi bem-sucedida.
    // - Preenche os territ√≥rios com seus dados iniciais (tropas, donos, etc.).
    // - Define a cor do jogador e sorteia sua miss√£o secreta.

    Territorio* mapa = alocarMapa(NUM_TERRITORIOS);
    if (mapa == NULL) {
        printf("Erro ao alocar mem√≥ria para o mapa.\n");
        return 1;
    }

    inicializarTerritorios(mapa, NUM_TERRITORIOS);

    char corJogador[MAX_COR] = "Vermelho"; 
    int missao = sortearMissao();

    int opcao;
    int venceu = 0;

    // 2. La√ßo Principal do Jogo (Game Loop):
    // - Roda em um loop 'do-while' que continua at√© o jogador sair (op√ß√£o 0) ou vencer.
    // - A cada itera√ß√£o, exibe o mapa, a miss√£o e o menu de a√ß√µes.
    // - L√™ a escolha do jogador e usa um 'switch' para chamar a fun√ß√£o apropriada:
    //   - Op√ß√£o 1: Inicia a fase de ataque.
    //   - Op√ß√£o 2: Verifica se a condi√ß√£o de vit√≥ria foi alcan√ßada e informa o jogador.
    //   - Op√ß√£o 0: Encerra o jogo.
    // - Pausa a execu√ß√£o para que o jogador possa ler os resultados antes da pr√≥xima rodada.

    do {
        exibirMapa(mapa, NUM_TERRITORIOS);
        exibirMissao(missao);
        exibirMenuPrincipal();

        printf("Escolha uma op√ß√£o: ");
        scanf("%d", &opcao);
        limparBufferEntrada();

        switch (opcao) {
            case 1:
                faseDeAtaque(mapa, NUM_TERRITORIOS);
                break;
            case 2:
                venceu = verificarVitoria(mapa, NUM_TERRITORIOS, missao);
                if (venceu) {
                    printf("\nüéâ Parab√©ns! Voc√™ cumpriu sua miss√£o!\n");
                    opcao = 0; // for√ßa sair do jogo
                } else {
                    printf("\nVoc√™ ainda n√£o cumpriu sua miss√£o.\n");
                }
                break;
            case 0:
                printf("\nEncerrando o jogo...\n");
                break;
            default:
                printf("Op√ß√£o inv√°lida!\n");
        }

        if (opcao != 0) {
            printf("\nPressione ENTER para continuar...");
            getchar();
        }

    } while (opcao != 0);


    // 3. Limpeza:
    // - Ao final do jogo, libera a mem√≥ria alocada para o mapa para evitar vazamentos de mem√≥ria.

    liberarMemoria(mapa);


    return 0;
}

// --- Implementa√ß√£o das Fun√ß√µes ---

// alocarMapa():
// Aloca dinamicamente a mem√≥ria para o vetor de territ√≥rios usando calloc.
// Retorna um ponteiro para a mem√≥ria alocada ou NULL em caso de falha.

// inicializarTerritorios():
// Preenche os dados iniciais de cada territ√≥rio no mapa (nome, cor do ex√©rcito, n√∫mero de tropas).
// Esta fun√ß√£o modifica o mapa passado por refer√™ncia (ponteiro).

// liberarMemoria():
// Libera a mem√≥ria previamente alocada para o mapa usando free.

// exibirMenuPrincipal():
// Imprime na tela o menu de a√ß√µes dispon√≠veis para o jogador.

// exibirMapa():
// Mostra o estado atual de todos os territ√≥rios no mapa, formatado como uma tabela.
// Usa 'const' para garantir que a fun√ß√£o apenas leia os dados do mapa, sem modific√°-los.

// exibirMissao():
// Exibe a descri√ß√£o da miss√£o atual do jogador com base no ID da miss√£o sorteada.

// faseDeAtaque():
// Gerencia a interface para a a√ß√£o de ataque, solicitando ao jogador os territ√≥rios de origem e destino.
// Chama a fun√ß√£o simularAtaque() para executar a l√≥gica da batalha.

// simularAtaque():
// Executa a l√≥gica de uma batalha entre dois territ√≥rios.
// Realiza valida√ß√µes, rola os dados, compara os resultados e atualiza o n√∫mero de tropas.
// Se um territ√≥rio for conquistado, atualiza seu dono e move uma tropa.

// sortearMissao():
// Sorteia e retorna um ID de miss√£o aleat√≥rio para o jogador.

// verificarVitoria():
// Verifica se o jogador cumpriu os requisitos de sua miss√£o atual.
// Implementa a l√≥gica para cada tipo de miss√£o (destruir um ex√©rcito ou conquistar um n√∫mero de territ√≥rios).
// Retorna 1 (verdadeiro) se a miss√£o foi cumprida, e 0 (falso) caso contr√°rio.

// limparBufferEntrada():
// Fun√ß√£o utilit√°ria para limpar o buffer de entrada do teclado (stdin), evitando problemas com leituras consecutivas de scanf e getchar.


Territorio* alocarMapa(int qtd) {
    return (Territorio*)calloc(qtd, sizeof(Territorio));
}

void inicializarTerritorios(Territorio* mapa, int qtd) {
    char* nomes[] = {"Brasil", "Argentina", "Chile", "Peru", "Col√¥mbia"};
    char* cores[] = {"Azul", "Verde", "Amarelo", "Vermelho", "Preto"};

    for (int i = 0; i < qtd; i++) {
        strncpy(mapa[i].nome, nomes[i], MAX_NOME);
        strncpy(mapa[i].corExercito, cores[rand() % 5], MAX_COR);
        mapa[i].tropas = rand() % 10 + 1; 
    }
}

void liberarMemoria(Territorio* mapa) {
    free(mapa);
}

void exibirMenuPrincipal() {
    printf("\n--- Menu Principal ---\n");
    printf("1. Atacar\n");
    printf("2. Verificar vit√≥ria\n");
    printf("0. Sair\n");
}

void exibirMapa(const Territorio* mapa, int qtd) {
    printf("\n--- Estado Atual do Mapa ---\n");
    printf("%-15s | %-10s | Tropas\n", "Territ√≥rio", "Cor");
    printf("------------------------------------\n");
    for (int i = 0; i < qtd; i++) {
        printf("%-15s | %-10s | %d\n", mapa[i].nome, mapa[i].corExercito, mapa[i].tropas);
    }
}

void exibirMissao(int idMissao) {
    printf("\n--- Sua Miss√£o ---\n");
    switch (idMissao) {
        case 0: printf("Conquistar 3 territ√≥rios.\n"); break;
        case 1: printf("Destruir todos os ex√©rcitos da cor Azul.\n"); break;
        case 2: printf("Manter pelo menos 2 territ√≥rios com 5+ tropas.\n"); break;
    }
}

void faseDeAtaque(Territorio* mapa, int qtd) {
    int origem, destino;

    exibirMapa(mapa, qtd);

    printf("\nEscolha o territ√≥rio de origem (0-%d): ", qtd-1);
    scanf("%d", &origem);
    printf("Escolha o territ√≥rio de destino (0-%d): ", qtd-1);
    scanf("%d", &destino);
    limparBufferEntrada();

    if (origem < 0 || origem >= qtd || destino < 0 || destino >= qtd || origem == destino) {
        printf("\nJogada inv√°lida!\n");
        return;
    }

    simularAtaque(mapa, origem, destino);
}

void simularAtaque(Territorio* mapa, int origem, int destino) {
    if (mapa[origem].tropas <= 1) {
        printf("\nVoc√™ n√£o tem tropas suficientes para atacar!\n");
        return;
    }

    int dadoAtaque = rand() % 6 + 1;
    int dadoDefesa = rand() % 6 + 1;

    printf("\n Dados: Ataque = %d | Defesa = %d\n", dadoAtaque, dadoDefesa);

    if (dadoAtaque > dadoDefesa) {
        printf("Vit√≥ria no ataque! %s perdeu 1 tropa.\n", mapa[destino].nome);
        mapa[destino].tropas--;

        if (mapa[destino].tropas <= 0) {
            printf(" Voc√™ conquistou %s!\n", mapa[destino].nome);
            strncpy(mapa[destino].corExercito, mapa[origem].corExercito, MAX_COR);
            mapa[destino].tropas = 1;
            mapa[origem].tropas--;
        }
    } else {
        printf("Defesa resistiu! %s perdeu 1 tropa.\n", mapa[origem].nome);
        mapa[origem].tropas--;
    }
}

int sortearMissao() {
    return rand() % NUM_MISSOES;
}

int verificarVitoria(const Territorio* mapa, int qtd, int idMissao) {
    switch (idMissao) {
        case 0: { // Conquistar 3 territ√≥rios
            int count = 0;
            for (int i = 0; i < qtd; i++) {
                if (strcmp(mapa[i].corExercito, "Vermelho") == 0) {
                    count++;
                }
            }
            return count >= 3;
        }
        case 1: { // Destruir todos os ex√©rcitos da cor Azul
            for (int i = 0; i < qtd; i++) {
                if (strcmp(mapa[i].corExercito, "Azul") == 0) {
                    return 0;
                }
            }
            return 1;
        }
        case 2: { // Manter pelo menos 2 territ√≥rios com 5+ tropas
            int count = 0;
            for (int i = 0; i < qtd; i++) {
                if (strcmp(mapa[i].corExercito, "Vermelho") == 0 && mapa[i].tropas >= 5) {
                    count++;
                }
            }
            return count >= 2;
        }
    }
    return 0;
}

void limparBufferEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}
