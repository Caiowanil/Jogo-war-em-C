#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <locale.h>



#define NUM_TERRITORIOS 5
#define NUM_MISSOES 3
#define MAX_NOME 50
#define MAX_COR 20


typedef struct {
    char nome[MAX_NOME];
    char corExercito[MAX_COR];
    int tropas;
} Territorio;


Territorio* alocarMapa(int qtd);
void inicializarTerritorios(Territorio* mapa, int qtd);
void liberarMemoria(Territorio* mapa);



void exibirMenuPrincipal();
void exibirMapa(const Territorio* mapa, int qtd);
void exibirMissao(int idMissao);



void faseDeAtaque(Territorio* mapa, int qtd);
void simularAtaque(Territorio* mapa, int origem, int destino);
int sortearMissao();
int verificarVitoria(const Territorio* mapa, int qtd, int idMissao);



void limparBufferEntrada();


int main() {

    setlocale(LC_ALL, "Portuguese");

    srand(time(NULL));
    

    Territorio* mapa = alocarMapa(NUM_TERRITORIOS);
    if (mapa == NULL) {
        printf("Erro ao alocar memória para o mapa.\n");
        return 1;
    }

    inicializarTerritorios(mapa, NUM_TERRITORIOS);

    char corJogador[MAX_COR] = "Vermelho"; 
    int missao = sortearMissao();

    int opcao;
    int venceu = 0;

   

    do {
        exibirMapa(mapa, NUM_TERRITORIOS);
        exibirMissao(missao);
        exibirMenuPrincipal();

        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBufferEntrada();

        switch (opcao) {
            case 1:
                faseDeAtaque(mapa, NUM_TERRITORIOS);
                break;
            case 2:
                venceu = verificarVitoria(mapa, NUM_TERRITORIOS, missao);
                if (venceu) {
                    printf("\n🎉 Parabéns! Você cumpriu sua missão!\n");
                    opcao = 0; // força sair do jogo
                } else {
                    printf("\nVocê ainda não cumpriu sua missão.\n");
                }
                break;
            case 0:
                printf("\nEncerrando o jogo...\n");
                break;
            default:
                printf("Opção inválida!\n");
        }

        if (opcao != 0) {
            printf("\nPressione ENTER para continuar...");
            getchar();
        }

    } while (opcao != 0);


    // 3. Limpeza:
    // - Ao final do jogo, libera a memória alocada para o mapa para evitar vazamentos de memória.

    liberarMemoria(mapa);


    return 0;
}



Territorio* alocarMapa(int qtd) {
    return (Territorio*)calloc(qtd, sizeof(Territorio));
}

void inicializarTerritorios(Territorio* mapa, int qtd) {
    char* nomes[] = {"Brasil", "Argentina", "Chile", "Peru", "Colômbia"};
    char* cores[] = {"Azul", "Verde", "Amarelo", "Vermelho", "Preto"};

    for (int i = 0; i < qtd; i++) {
        strncpy(mapa[i].nome, nomes[i], MAX_NOME);
        strncpy(mapa[i].corExercito, cores[rand() % 5], MAX_COR);
        mapa[i].tropas = rand() % 10 + 1; 
    }
}

void liberarMemoria(Territorio* mapa) {
    free(mapa);
}

void exibirMenuPrincipal() {
    printf("\n--- Menu Principal ---\n");
    printf("1. Atacar\n");
    printf("2. Verificar vitória\n");
    printf("0. Sair\n");
}

void exibirMapa(const Territorio* mapa, int qtd) {
    printf("\n--- Estado Atual do Mapa ---\n");
    printf("%-15s | %-10s | Tropas\n", "Território", "Cor");
    printf("------------------------------------\n");
    for (int i = 0; i < qtd; i++) {
        printf("%-15s | %-10s | %d\n", mapa[i].nome, mapa[i].corExercito, mapa[i].tropas);
    }
}

void exibirMissao(int idMissao) {
    printf("\n--- Sua Missão ---\n");
    switch (idMissao) {
        case 0: printf("Conquistar 3 territórios.\n"); break;
        case 1: printf("Destruir todos os exércitos da cor Azul.\n"); break;
        case 2: printf("Manter pelo menos 2 territórios com 5+ tropas.\n"); break;
    }
}

void faseDeAtaque(Territorio* mapa, int qtd) {
    int origem, destino;

    exibirMapa(mapa, qtd);

    printf("\nEscolha o território de origem (0-%d): ", qtd-1);
    scanf("%d", &origem);
    printf("Escolha o território de destino (0-%d): ", qtd-1);
    scanf("%d", &destino);
    limparBufferEntrada();

    if (origem < 0 || origem >= qtd || destino < 0 || destino >= qtd || origem == destino) {
        printf("\nJogada inválida!\n");
        return;
    }

    simularAtaque(mapa, origem, destino);
}

void simularAtaque(Territorio* mapa, int origem, int destino) {
    if (mapa[origem].tropas <= 1) {
        printf("\nVocê não tem tropas suficientes para atacar!\n");
        return;
    }

    int dadoAtaque = rand() % 6 + 1;
    int dadoDefesa = rand() % 6 + 1;

    printf("\n Dados: Ataque = %d | Defesa = %d\n", dadoAtaque, dadoDefesa);

    if (dadoAtaque > dadoDefesa) {
        printf("Vitória no ataque! %s perdeu 1 tropa.\n", mapa[destino].nome);
        mapa[destino].tropas--;

        if (mapa[destino].tropas <= 0) {
            printf(" Você conquistou %s!\n", mapa[destino].nome);
            strncpy(mapa[destino].corExercito, mapa[origem].corExercito, MAX_COR);
            mapa[destino].tropas = 1;
            mapa[origem].tropas--;
        }
    } else {
        printf("Defesa resistiu! %s perdeu 1 tropa.\n", mapa[origem].nome);
        mapa[origem].tropas--;
    }
}

int sortearMissao() {
    return rand() % NUM_MISSOES;
}

int verificarVitoria(const Territorio* mapa, int qtd, int idMissao) {
    switch (idMissao) {
        case 0: { // Conquistar 3 territórios
            int count = 0;
            for (int i = 0; i < qtd; i++) {
                if (strcmp(mapa[i].corExercito, "Vermelho") == 0) {
                    count++;
                }
            }
            return count >= 3;
        }
        case 1: { // Destruir todos os exércitos da cor Azul
            for (int i = 0; i < qtd; i++) {
                if (strcmp(mapa[i].corExercito, "Azul") == 0) {
                    return 0;
                }
            }
            return 1;
        }
        case 2: { // Manter pelo menos 2 territórios com 5+ tropas
            int count = 0;
            for (int i = 0; i < qtd; i++) {
                if (strcmp(mapa[i].corExercito, "Vermelho") == 0 && mapa[i].tropas >= 5) {
                    count++;
                }
            }
            return count >= 2;
        }
    }
    return 0;
}

void limparBufferEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}
